# please read the manual
# http://www.haproxy.org/#docs

global
  # no daemon!
  # don't use gid, uid, group or user on openshift

  ca-base /usr/local/etc/haproxy/ssl/cas
  crt-base /usr/local/etc/haproxy/ssl/crts

  # in docker or openshift?
  # log

  # Name of the POD or Service or ...
  # log-send-hostname
  # log-tag
  # node

  # it's magic ;-)
  ssl-default-bind-ciphers EECDH+ECDSA+AESGCM:EECDH+ECDSA+SHA384::EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:EDH+aRSA:!SHA-1:!RC4:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:@STRENGTH

  ssl-default-bind-options no-sslv3

  ssl-default-server-ciphers EECDH+ECDSA+AESGCM:EECDH+ECDSA+SHA384::EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:EDH+aRSA:!SHA-1:!RC4:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:@STRENGTH

  ssl-default-server-options no-sslv3

  # this file is created at build time!
  # openssl dhparam -out /usr/local/etc/haproxy/ssl/dh-param_4096 4096
  ssl-dh-param-file /usr/local/etc/haproxy/ssl/dh-param_4096

  # ssl-server-verify default is required

  # perf tun
  # I think this values should be carfully changed, in case you need to change it!

  # maxconn ??
  # maxconnrate
  # maxpipes
  # maxsessrate
  # maxsslconn
  # maxsslrate

  # defaults to 20000
  # tune.ssl.cachesize

  # default defaults to 300 (5 min)
  # tune.ssl.lifetime 

  # greater than  1024 bits are not supported
  # by Java 7 and earlier clients
  # tune.ssl.default-dh-param 4096

# peers !!
# peers ssl-sessions
#   Service disovering for the other haproxies in the cloud
#   peer <peername> <ip>:<port>

listen haproxy-monitor
  bind *:${MONITOR_BIND_PORT}
  mode health
  option httpchk

defaults
  timeout connect 5s
  timeout client 30s
  timeout server 30s

  # Long timeout for WebSocket connections.
  timeout tunnel 1h

  # balance ?
  # rate-limit sessions 
  option forwardfor
  option http-ignore-probes
  option splice-auto
  option log-separate-errors
  option ssl-hello-chk

frontend http-in
  bind *:${HTTP_BIND_PORT} accept-proxy tfo
  mode http

  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP

#frontend https-in
#  mode http
#  bind *:${HTTPS_BIND_PORT} accept-proxy ssl crt ... tfo
